// <auto-generated />
using System;
using BarraSuplementos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarraSuplementos.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BarraSuplementos.Models.Carrinho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Carrinho");
                });

            modelBuilder.Entity("BarraSuplementos.Models.CarrinhoProduto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CarrinhoId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("Qtd")
                        .HasColumnType("int");

                    b.Property<int?>("SaborId")
                        .HasColumnType("int");

                    b.HasKey("Id", "CarrinhoId");

                    b.HasIndex("CarrinhoId");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("SaborId");

                    b.ToTable("CarrinhoProduto");
                });

            modelBuilder.Entity("BarraSuplementos.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("BarraSuplementos.Models.Objetivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Objetivo");
                });

            modelBuilder.Entity("BarraSuplementos.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Imagem")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Lancamento")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("QtdEstoque")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorAtual")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ValorDesconto")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("BarraSuplementos.Models.ProdutoObjetivo", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ObjetivoId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("ProdutoId", "ObjetivoId");

                    b.HasIndex("ObjetivoId");

                    b.ToTable("ProdutoObjetivo");
                });

            modelBuilder.Entity("BarraSuplementos.Models.ProdutoSabor", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("SaborId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("ProdutoId", "SaborId");

                    b.HasIndex("SaborId");

                    b.ToTable("ProdutoSabor");
                });

            modelBuilder.Entity("BarraSuplementos.Models.Sabor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Sabor");
                });

            modelBuilder.Entity("BarraSuplementos.Models.Usuario", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("BarraSuplementos.Models.Carrinho", b =>
                {
                    b.HasOne("BarraSuplementos.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BarraSuplementos.Models.CarrinhoProduto", b =>
                {
                    b.HasOne("BarraSuplementos.Models.Carrinho", "Carrinho")
                        .WithMany("Produtos")
                        .HasForeignKey("CarrinhoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarraSuplementos.Models.Produto", "Produto")
                        .WithMany("Carrinhos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarraSuplementos.Models.Sabor", "Sabor")
                        .WithMany("Carrinhos")
                        .HasForeignKey("SaborId");

                    b.Navigation("Carrinho");

                    b.Navigation("Produto");

                    b.Navigation("Sabor");
                });

            modelBuilder.Entity("BarraSuplementos.Models.Produto", b =>
                {
                    b.HasOne("BarraSuplementos.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("BarraSuplementos.Models.ProdutoObjetivo", b =>
                {
                    b.HasOne("BarraSuplementos.Models.Objetivo", "Objetivo")
                        .WithMany("Produtos")
                        .HasForeignKey("ObjetivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarraSuplementos.Models.Produto", "Produto")
                        .WithMany("Objetivos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objetivo");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("BarraSuplementos.Models.ProdutoSabor", b =>
                {
                    b.HasOne("BarraSuplementos.Models.Produto", "Produto")
                        .WithMany("Sabores")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarraSuplementos.Models.Sabor", "Sabor")
                        .WithMany("Produtos")
                        .HasForeignKey("SaborId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Sabor");
                });

            modelBuilder.Entity("BarraSuplementos.Models.Usuario", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "ContaUsuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContaUsuario");
                });

            modelBuilder.Entity("BarraSuplementos.Models.Carrinho", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("BarraSuplementos.Models.Objetivo", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("BarraSuplementos.Models.Produto", b =>
                {
                    b.Navigation("Carrinhos");

                    b.Navigation("Objetivos");

                    b.Navigation("Sabores");
                });

            modelBuilder.Entity("BarraSuplementos.Models.Sabor", b =>
                {
                    b.Navigation("Carrinhos");

                    b.Navigation("Produtos");
                });
#pragma warning restore 612, 618
        }
    }
}
